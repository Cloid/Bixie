// This code is part of the Fungus library (https://github.com/snozbot/fungus)
// It is released for free under the MIT open source license (https://github.com/snozbot/fungus/blob/master/LICENSE)

/*This script has been, partially or completely, generated by the Fungus.GenerateVariableWindow*/
using UnityEngine;


namespace Fungus
{
    /// <summary>
    /// AudioClip variable type.
    /// </summary>
    [VariableInfo("Other", "AudioClip")]
    [AddComponentMenu("")]
	[System.Serializable]
	public class AudioClipVariable : VariableBase<UnityEngine.AudioClip>
	{ }

	/// <summary>
	/// Container for a AudioClip variable reference or constant value.
	/// </summary>
	[System.Serializable]
	public struct AudioClipData
	{
		[SerializeField]
		[VariableProperty("<Value>", typeof(AudioClipVariable))]
		public AudioClipVariable audioClipRef;

		[SerializeField]
		public UnityEngine.AudioClip audioClipVal;

		public static implicit operator UnityEngine.AudioClip(AudioClipData AudioClipData)
		{
			return AudioClipData.Value;
		}

		public AudioClipData(UnityEngine.AudioClip v)
		{
			audioClipVal = v;
			audioClipRef = null;
		}

		public UnityEngine.AudioClip Value
		{
			get { return (audioClipRef == null) ? audioClipVal : audioClipRef.Value; }
			set { if (audioClipRef == null) { audioClipVal = value; } else { audioClipRef.Value = value; } }
		}

		public string GetDescription()
		{
			if (audioClipRef == null)
			{
				return audioClipVal != null ? audioClipVal.ToString() : "Null";
			}
			else
			{
				return audioClipRef.Key;
			}
		}
	}
}