// This code is part of the Fungus library (https://github.com/snozbot/fungus)
// It is released for free under the MIT open source license (https://github.com/snozbot/fungus/blob/master/LICENSE)

/*This script has been, partially or completely, generated by the Fungus.GenerateVariableWindow*/
using UnityEngine;


namespace Fungus
{
    /// <summary>
    /// AudioMixer variable type.
    /// </summary>
    [VariableInfo("Other", "AudioMixer")]
    [AddComponentMenu("")]
	[System.Serializable]
	public class AudioMixerVariable : VariableBase<UnityEngine.Audio.AudioMixer>
	{ }

	/// <summary>
	/// Container for a AudioMixer variable reference or constant value.
	/// </summary>
	[System.Serializable]
	public struct AudioMixerData
	{
		[SerializeField]
		[VariableProperty("<Value>", typeof(AudioMixerVariable))]
		public AudioMixerVariable audioMixerRef;

		[SerializeField]
		public UnityEngine.Audio.AudioMixer audioMixerVal;

		public static implicit operator UnityEngine.Audio.AudioMixer(AudioMixerData AudioMixerData)
		{
			return AudioMixerData.Value;
		}

		public AudioMixerData(UnityEngine.Audio.AudioMixer v)
		{
			audioMixerVal = v;
			audioMixerRef = null;
		}

		public UnityEngine.Audio.AudioMixer Value
		{
			get { return (audioMixerRef == null) ? audioMixerVal : audioMixerRef.Value; }
			set { if (audioMixerRef == null) { audioMixerVal = value; } else { audioMixerRef.Value = value; } }
		}

		public string GetDescription()
		{
			if (audioMixerRef == null)
			{
				return audioMixerVal != null ? audioMixerVal.ToString() : "Null";
			}
			else
			{
				return audioMixerRef.Key;
			}
		}
	}
}